{"version":3,"sources":["InfoWindow.js","Map.js","index.js"],"names":["InfoWindowMap","props","infoWindowRef","React","createRef","contentElement","document","createElement","prevProps","this","children","ReactDOM","render","Children","only","current","infowindow","setContent","ref","Component","MarkersList","locations","markerProps","titles","storedMarkers","JSON","parse","localStorage","getItem","map","stored","i","onClick","window","mapContainer","onMarkerClick","onMarkerMounted","key","position","lat","lng","location","MapContainer","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","displayListMarkers","getElementsByClassName","classList","toggle","updateListMarkers","divMarkerList","innerHTML","length","title","toFixed","state","indexLat","findIndex","el","indexLng","checkExisting","style","display","saveMarkers","saveData","markerObjects","toStore","push","name","setItem","stringify","updateTitle","getElementsByTagName","value","markers","onClose","getElementById","reset","exportMarkers","blob","Blob","type","console","log","saveAs","readFile","file","json","reader","FileReader","addEventListener","loadEvent","target","result","prevState","error","readAsText","importMarkers","ev","stopPropagation","preventDefault","files","handleMapClick","latLng","panTo","initialLoad","element","bind","className","google","zoom","initialCenter","center","onTilesloaded","visible","id","size","maxLength","tabIndex","autoComplete","placeholder","data-id","src","htmlFor","onChange","GoogleApiWrapper","apiKey","libraries","Map"],"mappings":"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","file":"static/js/main.16240253.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { InfoWindow } from \"google-maps-react\";\n\nexport default class InfoWindowMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.infoWindowRef = React.createRef();\n    this.contentElement = document.createElement(`div`);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.children !== prevProps.children) {\n      ReactDOM.render(\n        React.Children.only(this.props.children),\n        this.contentElement\n      );\n      this.infoWindowRef.current.infowindow.setContent(this.contentElement);\n    }\n  }\n\n  render() {\n    return <InfoWindow ref={this.infoWindowRef} {...this.props} />;\n  }\n}\n","import React from \"react\";\nimport { Map, Marker, GoogleApiWrapper } from \"google-maps-react\";\nimport InfoWindowMap from \"./InfoWindow\";\nimport { saveAs } from 'file-saver';\nimport { logicalExpression } from \"@babel/types\";\n\nconst MarkersList = props => {\n  const { locations, titles, ...markerProps } = props;\n  var storedMarkers = JSON.parse(localStorage.getItem(\"markers\")) ? JSON.parse(localStorage.getItem(\"markers\")) : [];\n\n  return (\n    <span>\n      { \n        storedMarkers.map((stored, i) => {\n        return (\n            <Marker onClick={window.mapContainer.onMarkerClick} \n              ref={window.mapContainer.onMarkerMounted}\n              key={i}\n              {...markerProps}\n              position={{ lat: stored.lat, lng: stored.lng }}\n            />\n        );\n      })}\n      {locations.map((location, i) => {\n        return (\n            <Marker onClick={window.mapContainer.onMarkerClick} \n              ref={window.mapContainer.onMarkerMounted}\n              key={i}\n              {...markerProps}\n              position={{ lat: location.lat(), lng: location.lng() }}\n            />\n        );\n      })}\n    </span>\n  );\n};\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    window.mapContainer = this;\n    this.state = {\n      locations: [],\n      titles: [],\n      markerObjects: [],\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},         //Shows the active marker upon click\n      selectedPlace: {}         //Shows the infoWindow to the selected place upon a marker\n    };\n\n    this.initialLoad = true;\n\n    this.onMarkerMounted = element => {\n      this.setState(prevState => ({\n        markerObjects: [...prevState.markerObjects, element.marker]\n      }));\n    };\n\n    this.handleMapClick = this.handleMapClick.bind(this);\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  displayListMarkers = () => {\n    const divMarkerList = document.getElementsByClassName(\"markerList\")[0];\n    divMarkerList.classList.toggle('hide');\n  };\n\n  updateListMarkers = () => {\n    const divMarkerList = document.getElementsByClassName(\"markerList\")[0];\n    divMarkerList.innerHTML = \"<p>List of Markers</p>\";\n    var storedMarkers = JSON.parse(localStorage.getItem(\"markers\")) ? JSON.parse(localStorage.getItem(\"markers\")) : [];\n\n    if (storedMarkers.length > 0) {\n      for(var i = 0; i < storedMarkers.length; i++) {\n        divMarkerList.innerHTML += `<div class='marker'>\n        <span>${storedMarkers[i].title}</span><br>\n        <span>lat: ${storedMarkers[i].lat.toFixed(4)} </span><br>\n        <span>lng: ${storedMarkers[i].lng.toFixed(4)}</span><br>\n        </div>`; \n      }\n    }\n\n    for(var i = 0; i < this.state.locations.length; i++) {\n      var indexLat = storedMarkers.findIndex(el => el.lat === this.state.locations[i].lat());\n      var indexLng = storedMarkers.findIndex(el => el.lng === this.state.locations[i].lng());\n      var checkExisting = indexLat !== -1 && indexLng !== -1 && indexLat === indexLng;\n      if (storedMarkers.length > 0) {\n        if (!checkExisting) {\n              divMarkerList.innerHTML += `<div class='marker'>\n              <span>${this.state.titles[i]}</span><br>\n              <span>lat: ${this.state.locations[i].lat().toFixed(4)}</span><br>\n              <span>lng: ${this.state.locations[i].lng().toFixed(4)}</span><br>\n              </div>`; \n        }\n      } else {\n              divMarkerList.innerHTML += `<div class='marker'>\n              <span>${this.state.titles[i]}</span><br>\n              <span>lat: ${this.state.locations[i].lat().toFixed(4)}</span><br>\n              <span>lng: ${this.state.locations[i].lng().toFixed(4)}</span><br>\n              </div>`;\n      } \n    }\n    divMarkerList.style.display = \"block\";\n  };\n\n  saveMarkers = () => {\n    var saveData = this.state.markerObjects;\n    var toStore = [];\n    for (var i=0; i < saveData.length; i++) {\n      toStore.push({\"title\": saveData[i].name, \"lat\": saveData[i].position.lat(), \"lng\": saveData[i].position.lng()});\n    }\n    localStorage.setItem('markers', JSON.stringify(toStore));\n  }\n\n  updateTitle = (e) => {\n    const title = document.getElementsByTagName(\"input\")[0].value;\n    this.markers.activeMarker.title = title;\n    this.state.activeMarker.name = title;\n\n    this.updateListMarkers();\n  };\n\n  onClose = props => {\n    if(document.getElementById(\"form\") !== \"undefined\" && \n        document.getElementById(\"form\") !== null) {\n      document.getElementById(\"form\").reset();\n    }\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  exportMarkers = props => {\n    this.saveMarkers();\n    var blob = new Blob([localStorage.getItem(\"markers\")], {type: \"application/json\"});\n    console.log(localStorage.getItem(\"markers\"));\n    saveAs(blob, \"markers.json\");\n  };\n\n  readFile = (file) => {\n    var reader = new FileReader();\n    var json;\n    reader.addEventListener('load', (loadEvent) => {\n      try {\n        json = JSON.parse(loadEvent.target.result);\n        console.log(json);\n        localStorage.setItem(\"markers\", JSON.stringify(json));\n        this.setState(prevState => ({\n          showingInfoWindow: false\n        }));\n        this.updateListMarkers();\n      } catch (error) {\n        console.error(error);\n      }\n    });\n    reader.readAsText(file);\n  }\n\n  importMarkers = (ev) => {\n      ev.stopPropagation();\n      ev.preventDefault();\n      this.readFile(ev.target.files[0]);\n  }\n\n  handleMapClick = (ref, map, ev) => {\n    const location = ev.latLng;\n    const title = \"Marker\";\n    this.setState(prevState => ({\n      locations: [...prevState.locations, location], \n      titles: [...prevState.titles, title],\n    }));\n    \n    map.panTo(location);\n    this.onClose();\n    this.updateListMarkers();\n  };\n\n  render() {\n    return (\n      <div className=\"map-container\">\n        <Map\n          google={this.props.google}\n          className={\"map\"}\n          zoom={this.props.zoom}\n          initialCenter={this.props.center}\n          onClick={this.handleMapClick}\n          onTilesloaded={this.updateListMarkers}\n        >\n        \n        <MarkersList locations={this.state.locations} titles={this.state.titles}  />\n\n        <InfoWindowMap\n          marker={this.state.activeMarker}\n          visible={this.state.showingInfoWindow}\n          onClose={this.onClose}\n        >\n        <div>\n          <form id=\"form\">\n            <label>Título:</label>\n            <input type=\"text\" id=\"title\" size=\"31\" maxLength=\"31\" tabIndex=\"1\" autoComplete=\"off\" placeholder=\"Adicione título\"/>\n            <label>Descrição:</label>\n            <textarea id=\"description\" size=\"31\" tabIndex=\"2\" placeholder=\"Adicione descrição\"></textarea> \n            <input type=\"button\" id=\"inputButton\" tabIndex=\"3\" data-id={this.state.activeMarker} onClick={this.updateTitle} value=\"Submit\"/>\n          </form>\n        </div>\n        </InfoWindowMap>\n        </Map>\n        <div className={\"toolbar\"}>\n          <img className={\"button\"} src={\"/images/listButton.jpg\"} onClick={this.displayListMarkers}></img>\n          <img className={\"button\"} src={\"/images/saveButton.jpg\"} onClick={this.saveMarkers}></img>\n          <label className={\"jsonInput\"}  htmlFor=\"jsonFile\"><img className={\"button\"} src={\"/images/impButton.jpg\"}></img></label>\n          <input type=\"file\" id=\"jsonFile\" name=\"jsonFile\" onChange={this.importMarkers} />\n          <img className={\"button\"} src={\"/images/expButton.jpg\"} onClick={this.exportMarkers}></img>\n        </div>\n        <div className={\"markerList\"}> \n          <p>List of Markers</p>\n          <div className={\"list\"}></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"\",\n  libraries: []\n})(MapContainer);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Map from './Map';\nimport './style.css';\n\nrender(<Map center={{ lat: -23.533773, lng: -46.625290 }} zoom={12} />, document.getElementById('root'));\n"],"sourceRoot":""}